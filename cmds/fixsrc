#!/usr/bin/python

# encoding: UTF-8
import sys
import re
import os

resource_maps = {}

context_service_map = {}
intent_action_map = {}
intent_flag_map = {}
visibility_flag_map = {}
window_lp_flag_map = {}

def which(file):
    for path in os.environ["PATH"].split(os.pathsep):
        if os.path.exists(os.path.join(path, file)):
            return os.path.join(path, file)
    return None

def init(name):
    abspath = os.path.abspath(name)
    pos = abspath.rfind("/")
    if pos < 0:
        print("Error: you should call %s in fox" %name)
        exit(1)

    PREIFX = abspath[:pos]
    resource_maps["context_service"] = os.path.join(PREIFX, "context_service.txt")
    resource_maps["intent_action"] = os.path.join(PREIFX, "intent_action.txt")
    resource_maps["intent_flag"] = os.path.join(PREIFX, "intent_flag.txt")
    resource_maps["visibility_flag"] = os.path.join(PREIFX, "visibility_flag.txt")
    resource_maps["window_lp_flag"] = os.path.join(PREIFX, "window_lp_flag.txt")

def load_string(flag_file, out_map):
    with open(flag_file) as f:
        for line in f:
            line_kv = line.split(":")
            out_map[line_kv[0]] = line_kv[1][:-1]

def load_flag(flag_file, out_map):
    with open(flag_file) as f:
        for line in f:
            if line.startswith("#"):
                continue
            line_kv = line.split(":")
            flag_bit = int(line_kv[0], 16)
            out_map[flag_bit] = line_kv[1][:-1]

def gen_string_from_flag_map(flag, inmap):
    flag_backup = flag
    flag_str = None
    for k, v in inmap.items():
        if flag & k == k:
            if flag_str is None:
                flag_str = v
            else:
                flag_str = flag_str  + " | " + v
            # clear the bit
            flag &= ~k
    if flag == 0:
        return "%s /* 0x%08x */" %(flag_str, flag_backup)
    return "%s | 0x%08x /* 0x%08x */" %(flag_str, flag, flag_backup)

def gen_string_from_flag_table(flag, inmap):
    return inmap[flag]

def decimal2hex(number):
    hex = 0xFFFFFFFF+(-328966) +1 if number < 0 else number

def replace_flags(text, pattern, cust_map, mode="map", type="method"):
    def dashrepl(matchobj):
        origin_str = matchobj.group(0)
        flag_str = matchobj.group(1)
        flag = int(flag_str, 0)

        if mode == "table":
            flag_gen = gen_string_from_flag_table(flag, cust_map)
        elif mode == "map":
            flag_gen = gen_string_from_flag_map(flag, cust_map)

        print("%s --> %s" %(flag, flag_gen))
        return re.sub(flag_str, flag_gen, origin_str)

    p_pattern = None
    if type == "method":
        p_pattern = r"\.%s\((\d+)\)" % pattern
    elif type == "bitwise":
        p_pattern = r"%s [&|=]+ (\d+)" % pattern
    else:
        return None

    return re.sub(p_pattern, dashrepl, text)

def all(fsrc):
    with open(fsrc, 'rb+') as fd:
        s = fd.read()

        # replace intent actions
        for k, v in intent_action_map.items():
            s = re.sub(k, v, s);

        # replace system services
        for k, v in context_service_map.items():
            s = re.sub("getSystemService\(%s\)" %k, "getSystemService(%s)" %v, s);

        # replace view visibility flags
        s = replace_flags(s, "setVisibility", visibility_flag_map, "table")

        # replace intent flags
        s = replace_flags(s, "intent.setFlags", intent_flag_map, "map")

        # replace window layoutparams flags
        s = replace_flags(s, "lp.flags", window_lp_flag_map, "map", "bitwise")
        s = replace_flags(s, "mWLayoutParams.flags", window_lp_flag_map, "map", "bitwise")

        fd.seek(0, 0)
        fd.write(s)

def replace_files(file_lists):
    for i in file_lists:
        print("--> replace %s" %i)
        all(i)

def replace(str1, str2, fsrc):
    with open(fsrc, "rb+") as f:
        s = f.read()
        s = re.sub(str1, str2, s)
        f.seek(0, 0)
        f.write(s)

def replace_string(str1, str2, file_lists):
    for i in file_lists:
        print("--> replace %s" %i)
        replace(str1, str2, i)

def help(name):
    print("Usage: %s" %name)
    print("       %s f_i [intent_action_string]" %name)
    print("       %s f_lp [number]" %name)
    print("       %s r_s [str_src] [str_des] [file1, file2, ...]" %name)
    print("       %s a [file1, file2, ...]" %name)

def getname(name):
    pos = name.rfind('/')
    if pos >= 0:
        return name[pos+1:]
    else:
        return name

def main(argv):
    if (len(argv) < 3):
        help(name)
        return

    init(sys.argv[0])
    load_string(resource_maps["context_service"], context_service_map)
    load_string(resource_maps["intent_action"], intent_action_map)
    load_flag(resource_maps["intent_flag"], intent_flag_map)
    load_flag(resource_maps["visibility_flag"], visibility_flag_map)
    load_flag(resource_maps["window_lp_flag"], window_lp_flag_map)

    name = getname(argv[0])
    option = argv[1]
    if option == "f_i" or option == "intent" :
        flag = int(argv[2], 0)
        print(gen_string_from_flag_map(flag, intent_flag_map))
    elif option == "f_lp":
        flag = int(argv[2], 0)
        print(gen_string_from_flag_map(flag, window_lp_flag_map))
    elif option == "r_s":
        # print argv
        replace_string(argv[2], argv[3], argv[4:])
    elif option == "a":
        replace_files(argv[2:])
    else:
        help(name)

if __name__ == "__main__":
    main(sys.argv)
